apiVersion: v1
kind: Namespace
metadata:
  name: heptio-contour
---
apiVersion: v1
kind: Namespace
metadata:
  labels:
    control-plane: controller-manager
    controller-tools.k8s.io: "1.0"
  name: schemahero-system
---
apiVersion: v1
kind: Namespace
metadata:
  labels:
    controller-tools.k8s.io: "1.0"
  name: ship-operator-system
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  labels:
    controller-tools.k8s.io: "1.0"
  name: databases.databases.schemahero.io
spec:
  group: databases.schemahero.io
  names:
    kind: Database
    plural: databases
  scope: Namespaced
  subresources:
    status: {}
  validation:
    openAPIV3Schema:
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources'
          type: string
        connection:
          properties:
            mysql:
              properties:
                uri:
                  properties:
                    value:
                      type: string
                    valueFrom:
                      properties:
                        secretKeyRef:
                          properties:
                            key:
                              type: string
                            name:
                              type: string
                          required:
                          - name
                          - key
                          type: object
                      type: object
                  type: object
              type: object
            postgres:
              properties:
                uri:
                  properties:
                    value:
                      type: string
                    valueFrom:
                      properties:
                        secretKeyRef:
                          properties:
                            key:
                              type: string
                            name:
                              type: string
                          required:
                          - name
                          - key
                          type: object
                      type: object
                  type: object
              type: object
          type: object
        kind:
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        schemahero:
          properties:
            image:
              type: string
            nodeSelector:
              type: object
          type: object
        status:
          properties:
            isConnected:
              type: boolean
            lastPing:
              type: string
          required:
          - isConnected
          - lastPing
          type: object
  version: v1alpha2
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  labels:
    component: ingressroute
  name: ingressroutes.contour.heptio.com
spec:
  additionalPrinterColumns:
  - JSONPath: .spec.virtualhost.fqdn
    description: Fully qualified domain name
    name: FQDN
    type: string
  - JSONPath: .spec.virtualhost.tls.secretName
    description: Secret with TLS credentials
    name: TLS Secret
    type: string
  - JSONPath: .spec.routes[0].match
    description: First routes defined
    name: First route
    type: string
  - JSONPath: .status.currentStatus
    description: The current status of the IngressRoute
    name: Status
    type: string
  - JSONPath: .status.description
    description: Description of the current status
    name: Status Description
    type: string
  group: contour.heptio.com
  names:
    kind: IngressRoute
    plural: ingressroutes
  scope: Namespaced
  validation:
    openAPIV3Schema:
      properties:
        spec:
          properties:
            healthCheck:
              properties:
                healthyThresholdCount:
                  type: integer
                intervalSeconds:
                  type: integer
                path:
                  pattern: ^\/.*$
                  type: string
                timeoutSeconds:
                  type: integer
                unhealthyThresholdCount:
                  type: integer
              required:
              - path
              type: object
            routes:
              items:
                properties:
                  delegate:
                    properties:
                      name:
                        pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
                        type: string
                      namespace:
                        pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?$
                        type: string
                    required:
                    - name
                    type: object
                  match:
                    pattern: ^\/.*$
                    type: string
                  services:
                    items:
                      properties:
                        healthCheck:
                          properties:
                            healthyThresholdCount:
                              type: integer
                            intervalSeconds:
                              type: integer
                            path:
                              pattern: ^\/.*$
                              type: string
                            timeoutSeconds:
                              type: integer
                            unhealthyThresholdCount:
                              type: integer
                          required:
                          - path
                          type: object
                        name:
                          pattern: ^[a-z]([-a-z0-9]*[a-z0-9])?$
                          type: string
                        port:
                          type: integer
                        strategy:
                          enum:
                          - RoundRobin
                          - WeightedLeastRequest
                          - Random
                          - RingHash
                          - Maglev
                          type: string
                        weight:
                          type: integer
                      required:
                      - name
                      - port
                      type: object
                    type: array
                required:
                - match
              type: array
            strategy:
              enum:
              - RoundRobin
              - WeightedLeastRequest
              - Random
              - RingHash
              - Maglev
              type: string
            virtualhost:
              properties:
                fqdn:
                  pattern: ^([a-zA-Z0-9]+(-[a-zA-Z0-9]+)*\.)+[a-z0-9]{2,}$
                  type: string
                tls:
                  properties:
                    minimumProtocolVersion:
                      enum:
                      - "1.3"
                      - "1.2"
                      - "1.1"
                      type: string
                    secretName:
                      pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?([\.\/][a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
                      type: string
  version: v1beta1
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  labels:
    controller-tools.k8s.io: "1.0"
  name: migrations.schemas.schemahero.io
spec:
  group: schemas.schemahero.io
  names:
    kind: Migration
    plural: migrations
  scope: Namespaced
  validation:
    openAPIV3Schema:
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          type: object
        status:
          type: object
  version: v1alpha2
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  labels:
    controller-tools.k8s.io: "1.0"
  name: shipwatches.ship.replicated.com
spec:
  group: ship.replicated.com
  names:
    kind: ShipWatch
    plural: shipwatches
  scope: Namespaced
  validation:
    openAPIV3Schema:
      properties:
        apiVersion:
          type: string
        kind:
          type: string
        metadata:
          type: object
        spec:
          properties:
            actions:
              items:
                properties:
                  name:
                    type: string
                  pullRequest:
                    properties:
                      basePath:
                        type: string
                      github:
                        properties:
                          branch:
                            type: string
                          key:
                            properties:
                              valueFrom:
                                properties:
                                  secretKeyRef:
                                    properties:
                                      key:
                                        type: string
                                      name:
                                        type: string
                                      serviceAccountName:
                                        type: string
                                    required:
                                    - name
                                    - key
                                    - serviceAccountName
                                    type: object
                                type: object
                            type: object
                          owner:
                            type: string
                          path:
                            type: string
                          repo:
                            type: string
                          token:
                            properties:
                              valueFrom:
                                properties:
                                  secretKeyRef:
                                    properties:
                                      key:
                                        type: string
                                      name:
                                        type: string
                                      serviceAccountName:
                                        type: string
                                    required:
                                    - name
                                    - key
                                    - serviceAccountName
                                    type: object
                                type: object
                            type: object
                          username:
                            type: string
                        required:
                        - username
                        - owner
                        - repo
                        - branch
                        - token
                        - key
                        type: object
                      message:
                        type: string
                    required:
                    - message
                    - basePath
                    type: object
                  webhook:
                    properties:
                      payload:
                        type: string
                      secret:
                        type: string
                      uri:
                        type: string
                    required:
                    - uri
                    - payload
                    type: object
                required:
                - name
                type: object
              minItems: 1
              type: array
            environment:
              items:
                type: object
              type: array
            images:
              items:
                properties:
                  image:
                    type: string
                  imagePullPolicy:
                    type: string
                  tag:
                    type: string
                required:
                - image
                - tag
                - imagePullPolicy
                type: object
              type: array
            state:
              properties:
                valueFrom:
                  properties:
                    secretKeyRef:
                      properties:
                        key:
                          type: string
                        name:
                          type: string
                        serviceAccountName:
                          type: string
                      required:
                      - name
                      - key
                      - serviceAccountName
                      type: object
                  type: object
              type: object
            watchInterval:
              type: string
          required:
          - state
          type: object
        status:
          type: object
      type: object
  version: v1beta1
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  labels:
    controller-tools.k8s.io: "1.0"
  name: tables.schemas.schemahero.io
spec:
  group: schemas.schemahero.io
  names:
    kind: Table
    plural: tables
  scope: Namespaced
  validation:
    openAPIV3Schema:
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          properties:
            database:
              type: string
            name:
              type: string
            requires:
              items:
                type: string
              type: array
            schema:
              properties:
                mysql:
                  properties:
                    columns:
                      items:
                        properties:
                          constraints:
                            properties:
                              notNull:
                                type: boolean
                            type: object
                          default:
                            type: string
                          name:
                            type: string
                          type:
                            type: string
                        required:
                        - name
                        - type
                        type: object
                      type: array
                    foreignKeys:
                      items:
                        properties:
                          columns:
                            items:
                              type: string
                            type: array
                          name:
                            type: string
                          references:
                            properties:
                              columns:
                                items:
                                  type: string
                                type: array
                              table:
                                type: string
                            required:
                            - table
                            - columns
                            type: object
                        required:
                        - columns
                        - references
                        type: object
                      type: array
                    isDeleted:
                      type: boolean
                    primaryKey:
                      items:
                        type: string
                      type: array
                  required:
                  - primaryKey
                  type: object
                postgres:
                  properties:
                    columns:
                      items:
                        properties:
                          constraints:
                            properties:
                              notNull:
                                type: boolean
                            type: object
                          default:
                            type: string
                          name:
                            type: string
                          type:
                            type: string
                        required:
                        - name
                        - type
                        type: object
                      type: array
                    foreignKeys:
                      items:
                        properties:
                          columns:
                            items:
                              type: string
                            type: array
                          name:
                            type: string
                          references:
                            properties:
                              columns:
                                items:
                                  type: string
                                type: array
                              table:
                                type: string
                            required:
                            - table
                            - columns
                            type: object
                        required:
                        - columns
                        - references
                        type: object
                      type: array
                    isDeleted:
                      type: boolean
                    primaryKey:
                      items:
                        type: string
                      type: array
                  required:
                  - primaryKey
                  type: object
              type: object
          required:
          - database
          - name
          - schema
          type: object
        status:
          type: object
  version: v1alpha2
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  labels:
    component: tlscertificatedelegation
  name: tlscertificatedelegations.contour.heptio.com
spec:
  group: contour.heptio.com
  names:
    kind: TLSCertificateDelegation
    plural: tlscertificatedelegations
  scope: Namespaced
  validation:
    openAPIV3Schema:
      properties:
        spec:
          properties:
            delegations:
              items:
                properties:
                  match:
                    type: string
                  targetNamespaces:
                    type: array
                required:
                - secretName
                - targetNamespaces
                type: object
              type: array
  version: v1beta1
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: minio
  namespace: default
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ship-cluster-worker-analyze
  namespace: default
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ship-cluster-worker-edit
  namespace: default
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ship-cluster-worker-init
  namespace: default
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ship-cluster-worker-update
  namespace: default
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ship-cluster-worker-watch
  namespace: default
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: contour
  namespace: heptio-contour
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: schemahero-manager-role
rules:
- apiGroups:
  - apps
  resources:
  - deployments
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - apps
  resources:
  - deployments/status
  verbs:
  - get
  - update
  - patch
- apiGroups:
  - databases.schemahero.io
  resources:
  - databases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - databases.schemahero.io
  resources:
  - databases/status
  verbs:
  - get
  - update
  - patch
- apiGroups:
  - apps
  resources:
  - deployments
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - apps
  resources:
  - deployments/status
  verbs:
  - get
  - update
  - patch
- apiGroups:
  - schemas.schemahero.io
  resources:
  - migrations
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - schemas.schemahero.io
  resources:
  - migrations/status
  verbs:
  - get
  - update
  - patch
- apiGroups:
  - apps
  resources:
  - deployments
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - apps
  resources:
  - deployments/status
  verbs:
  - get
  - update
  - patch
- apiGroups:
  - schemas.schemahero.io
  resources:
  - tables
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - schemas.schemahero.io
  resources:
  - tables/status
  verbs:
  - get
  - update
  - patch
- apiGroups:
  - admissionregistration.k8s.io
  resources:
  - mutatingwebhookconfigurations
  - validatingwebhookconfigurations
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - roles
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - rolebindings
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - serviceaccounts
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: schemahero-proxy-role
rules:
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: ship-operator-manager-role
rules:
- apiGroups:
  - batch
  resources:
  - jobs
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - pods
  - secrets
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ship.replicated.com
  resources:
  - shipwatches
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: contour
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  - endpoints
  - nodes
  - pods
  - secrets
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - contour.heptio.com
  resources:
  - ingressroutes
  - tlscertificatedelegations
  verbs:
  - get
  - list
  - watch
  - put
  - post
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: analyze-worker-get-namespaces
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: ship-cluster-worker-analyze
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: init-worker-list-pods
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: ship-cluster-worker-init
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  creationTimestamp: null
  name: schemahero-manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: schemahero-manager-role
subjects:
- kind: ServiceAccount
  name: default
  namespace: schemahero-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: schemahero-proxy-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: schemahero-proxy-role
subjects:
- kind: ServiceAccount
  name: default
  namespace: schemahero-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  creationTimestamp: null
  name: ship-operator-manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: ship-operator-manager-role
subjects:
- kind: ServiceAccount
  name: default
  namespace: ship-operator-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: ship-worker-list-pods
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: ship-cluster-worker-edit
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: update-worker-list-pods
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: ship-cluster-worker-update
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: watch-worker-get-namespaces
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: ship-cluster-worker-watch
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: contour
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: contour
subjects:
- kind: ServiceAccount
  name: contour
  namespace: heptio-contour
---
apiVersion: v1
data:
  initialize: "#!/bin/sh\nset -e ; # Have script exit in the event of a failed command.\n\n# connectToMinio\n# Use a check-sleep-check loop to wait for Minio service to be available\nconnectToMinio() {\n  SCHEME=$1\n  ATTEMPTS=0 ; LIMIT=29 ; # Allow 30 attempts\n  set -e ; # fail if we can't read the keys.\n  ACCESS=$(cat /config/accesskey) ; SECRET=$(cat /config/secretkey) ;\n  set +e ; # The connections to minio are allowed to fail.\n  echo \"Connecting to Minio server: $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT\" ;\n  MC_COMMAND=\"mc config host add myminio $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT $ACCESS $SECRET\" ;\n  $MC_COMMAND ;\n  STATUS=$? ;\n  until [ $STATUS = 0 ]\n  do\n    ATTEMPTS=`expr $ATTEMPTS + 1` ;\n    echo \\\"Failed attempts: $ATTEMPTS\\\" ;\n    if [ $ATTEMPTS -gt $LIMIT ]; then\n      exit 1 ;\n    fi ;\n    sleep 2 ; # 1 second intervals between attempts\n    $MC_COMMAND ;\n    STATUS=$? ;\n  done ;\n  set -e ; # reset `e` as active\n  return 0\n}\n\n# checkBucketExists ($bucket)\n# Check if the bucket exists, by using the exit code of `mc ls`\ncheckBucketExists() {\n  BUCKET=$1\n  CMD=$(/usr/bin/mc ls myminio/$BUCKET > /dev/null 2>&1)\n  return $?\n}\n\n# createBucket ($bucket, $policy, $purge)\n# Ensure bucket exists, purging if asked to\ncreateBucket() {\n  BUCKET=$1\n  POLICY=$2\n  PURGE=$3\n\n  # Purge the bucket, if set & exists\n  # Since PURGE is user input, check explicitly for `true`\n  if [ $PURGE = true ]; then\n    if checkBucketExists $BUCKET ; then\n      echo \"Purging bucket '$BUCKET'.\"\n      set +e ; # don't exit if this fails\n      /usr/bin/mc rm -r --force myminio/$BUCKET\n      set -e ; # reset `e` as active\n    else\n      echo \"Bucket '$BUCKET' does not exist, skipping purge.\"\n    fi\n  fi\n\n  # Create the bucket if it does not exist\n  if ! checkBucketExists $BUCKET ; then\n    echo \"Creating bucket '$BUCKET'\"\n    /usr/bin/mc mb myminio/$BUCKET\n  else\n    echo \"Bucket '$BUCKET' already exists.\"\n  fi\n\n  # At this point, the bucket should exist, skip checking for existence\n  # Set policy on the bucket\n  echo \"Setting policy of bucket '$BUCKET' to '$POLICY'.\"\n  /usr/bin/mc policy $POLICY myminio/$BUCKET\n}\n\n# Try connecting to Minio instance\nscheme=http\nconnectToMinio $scheme\n# Create the buckets\ncreateBucket ship-enterprise none "
kind: ConfigMap
metadata:
  labels:
    app: minio
    release: minio
  name: minio
---
apiVersion: v1
data:
  start-ship-cluster-ui.sh: |
    #!/bin/bash
    sed -i 's/###_GRAPHQL_ENDPOINT_###/https:\/\/test\/graphql/g' /usr/share/nginx/html/index.html
    sed -i 's/###_REST_ENDPOINT_###/https:\/\/test\/api/g' /usr/share/nginx/html/index.html
    sed -i 's/###_GITHUB_CLIENT_ID_###//g' /usr/share/nginx/html/index.html
    sed -i 's/###_SHIPDOWNLOAD_ENDPOINT_###/https:\/\/test\/api\/v1\/download/g' /usr/share/nginx/html/index.html
    sed -i 's/###_SHIPINIT_ENDPOINT_###/https:\/\/test\/api\/v1\/init\//g' /usr/share/nginx/html/index.html
    sed -i 's/###_SHIPUPDATE_ENDPOINT_###/https:\/\/test\/api\/v1\/update\//g' /usr/share/nginx/html/index.html
    sed -i 's/###_SHIPEDIT_ENDPOINT_###/https:\/\/test\/api\/v1\/edit\//g' /usr/share/nginx/html/index.html
    sed -i 's/###_GITHUB_REDIRECT_URI_###/https:\/\/test\/auth\/github\/callback/g' /usr/share/nginx/html/index.html
    sed -i 's/###_GITHUB_INSTALL_URL_###//g' /usr/share/nginx/html/index.html
    sed -i 's/###_INSTALL_ENDPOINT_###/https:\/\/test\/api\/install/g' /usr/share/nginx/html/index.html

    nginx -g "daemon off;"
kind: ConfigMap
metadata:
  name: ship-cluster-ui-scripts
---
apiVersion: v1
data:
  tls.crt: 
  tls.key: 
kind: Secret
metadata:
  name: ship-enterprise-tls
  namespace: default
type: kubernetes.io/tls
---
apiVersion: v1
kind: Secret
metadata:
  name: schemahero-webhook-server-secret
  namespace: schemahero-system
---
apiVersion: v1
data:
  .dockerconfigjson: |
    eyJhdXRocyI6IHsicmVnaXN0cnkucmVwbGljYXRlZC5jb20iOnsidXNlcm5hbWUiOiJfd0RqeDRJejJlMDg3aF9oREx5eXktUUMyZENyeHFFNyIsInBhc3N3b3JkIjoiX3dEang0SXoyZTA4N2hfaERMeXl5LVFDMmRDcnhxRTciIH0gfSB9IA==
kind: Secret
metadata:
  name: replicatedregistrykey
  namespace: ship-operator-system
type: kubernetes.io/dockerconfigjson
---
apiVersion: v1
data:
  private-key.pem: ""
kind: Secret
metadata:
  name: github-app-private-key
type: Opaque
---
apiVersion: v1
data:
  client-id: ""
  client-secret: ""
  install-url: ""
  integration-id: ""
kind: Secret
metadata:
  name: github-app
---
apiVersion: v1
data:
  postgresql-password: |
    eHVUS3JaejJMdlV5cXhMZDNQb3BfVElENFlqbWtWM3dLaFdxUkxZYg==
kind: Secret
metadata:
  name: postgresql-secret
type: Opaque
---
apiVersion: v1
data:
  .dockerconfigjson: eyJhdXRocyI6IHsicmVnaXN0cnkucmVwbGljYXRlZC5jb20iOnsidXNlcm5hbWUiOiJfd0RqeDRJejJlMDg3aF9oREx5eXktUUMyZENyeHFFNyIsInBhc3N3b3JkIjoiX3dEang0SXoyZTA4N2hfaERMeXl5LVFDMmRDcnhxRTciIH0gfSB9IA==
kind: Secret
metadata:
  name: replicatedregistrykey
type: kubernetes.io/dockerconfigjson
---
apiVersion: v1
data:
  accesskey: dUdiYmg5VDdRcDVUQUZqdjlHNVF2TjV5S1RKOTVFX3M=
  secretkey: WWZqSWZ4RUg4NHhnZlpUYTBYUTYwV0VjTFJnYWZkSVc=
kind: Secret
metadata:
  name: s3-secret
type: Opaque
---
apiVersion: v1
data:
  key: b0tSZ0V6ZG5wMldsNTZhODhEYnNUOXVoWV9zQmpsUEhXTENhR0ZOY0YzV084SVV4TXVLek1FRVNoelpka0w1OA==
kind: Secret
metadata:
  labels:
    app: ship-cluster-api
  name: session
type: Opaque
---
apiVersion: v1
data:
  uri: cG9zdGdyZXNxbDovL3NoaXAtZW50ZXJwcmlzZTp4dVRLclp6Mkx2VXlxeExkM1BvcF9USUQ0WWpta1Yzd0toV3FSTFliQHNoaXAtZW50ZXJwcmlzZS1wb3N0Z3Jlc3FsL3NoaXAtZW50ZXJwcmlzZT9jb25uZWN0X3RpbWVvdXQ9MTAmYXBwbGljYXRpb25fbmFtZT1zaGlwLWVudGVycHJpc2Umc3NsbW9kZT1kaXNhYmxl
kind: Secret
metadata:
  name: ship-enterprise-postgres
type: Opaque
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: tcp
  name: contour
  namespace: heptio-contour
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 8080
  - name: https
    port: 443
    protocol: TCP
    targetPort: 8443
  selector:
    app: contour
  type: LoadBalancer
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "8443"
    prometheus.io/scheme: https
    prometheus.io/scrape: "true"
  labels:
    control-plane: controller-manager
    controller-tools.k8s.io: "1.0"
  name: schemahero-controller-manager-metrics-service
  namespace: schemahero-system
spec:
  ports:
  - name: https
    port: 8443
    targetPort: https
  selector:
    control-plane: controller-manager
    controller-tools.k8s.io: "1.0"
---
apiVersion: v1
kind: Service
metadata:
  labels:
    control-plane: controller-manager
    controller-tools.k8s.io: "1.0"
  name: schemahero-controller-manager-service
  namespace: schemahero-system
spec:
  ports:
  - port: 443
  selector:
    control-plane: controller-manager
    controller-tools.k8s.io: "1.0"
---
apiVersion: v1
kind: Service
metadata:
  labels:
    control-plane: controller-manager
    controller-tools.k8s.io: "1.0"
  name: ship-operator-controller-manager-service
  namespace: ship-operator-system
spec:
  ports:
  - port: 443
  selector:
    control-plane: controller-manager
    controller-tools.k8s.io: "1.0"
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: ship-cluster-worker-analyze
  name: analyze-server
spec:
  ports:
  - name: http
    port: 3000
    targetPort: analyze-server
  selector:
    app: ship-cluster-worker-analyze
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: ship-cluster-worker-edit
  name: edit-server
spec:
  ports:
  - name: http
    port: 3000
    targetPort: edit-server
  selector:
    app: ship-cluster-worker-edit
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: ship-cluster-worker-init
  name: init-server
spec:
  ports:
  - name: http
    port: 3000
    targetPort: init-server
  selector:
    app: ship-cluster-worker-init
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: minio
    release: minio
  name: minio
spec:
  ports:
  - name: service
    port: 9000
    protocol: TCP
    targetPort: 9000
  selector:
    app: minio
    release: minio
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: ship-cluster-api
  name: ship-cluster-api
spec:
  ports:
  - name: http
    port: 3000
    targetPort: http
  selector:
    app: ship-cluster-api
  type: NodePort
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: ship-cluster-ui
  name: ship-cluster-ui
spec:
  ports:
  - name: http
    port: 3000
    targetPort: http
  selector:
    app: ship-cluster-ui
  type: NodePort
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: postgresql
    release: ship-enterprise
  name: ship-enterprise-postgresql-headless
spec:
  clusterIP: None
  ports:
  - name: postgresql
    port: 5432
    targetPort: postgresql
  selector:
    app: postgresql
    release: ship-enterprise
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: postgresql
    release: ship-enterprise
  name: ship-enterprise-postgresql
spec:
  ports:
  - name: postgresql
    port: 5432
    targetPort: postgresql
  selector:
    app: postgresql
    release: ship-enterprise
    role: master
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: ship-cluster-worker-update
  name: update-server
spec:
  ports:
  - name: http
    port: 3000
    targetPort: update-server
  selector:
    app: ship-cluster-worker-update
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: ship-cluster-worker-watch
  name: watch-server
spec:
  ports:
  - name: http
    port: 3000
    targetPort: watch-server
  selector:
    app: ship-cluster-worker-watch
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ship-cluster-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ship-cluster-api
  template:
    metadata:
      labels:
        app: ship-cluster-api
    spec:
      affinity:
        podAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - ship-www
              topologyKey: kubernetes.io/hostname
            weight: 1
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - ship-cluster-api
              topologyKey: kubernetes.io/hostname
            weight: 2
      containers:
      - env:
        - name: SESSION_KEY
          valueFrom:
            secretKeyRef:
              key: key
              name: session
        - name: POSTGRES_URI
          valueFrom:
            secretKeyRef:
              key: uri
              name: ship-enterprise-postgres
        - name: INIT_SERVER_URI
          value: http://init-server:3000
        - name: WATCH_SERVER_URI
          value: http://watch-server:3000
        - name: PINO_LOG_PRETTY
          value: "1"
        - name: S3_ENDPOINT
          value: |
            http://minio.default.svc.cluster.local:9000/
        - name: S3_BUCKET_NAME
          value: |
            ship-enterprise
        - name: S3_ACCESS_KEY_ID
          value: |
            uGbbh9T7Qp5TAFjv9G5QvN5yKTJ95E_s
        - name: S3_SECRET_ACCESS_KEY
          value: |
            YfjIfxEH84xgfZTa0XQ60WEcLRgafdIW
        - name: S3_BUCKET_ENDPOINT
          value: |
            true
        - name: SHIP_API_ADVERTISE_ENDPOINT
          value: http://docker.for.mac.localhost:30065
        - name: GITHUB_CLIENT_ID
          valueFrom:
            secretKeyRef:
              key: client-id
              name: github-app
        - name: GITHUB_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              key: client-secret
              name: github-app
        - name: GITHUB_INTEGRATION_ID
          valueFrom:
            secretKeyRef:
              key: integration-id
              name: github-app
        - name: SHIP_API_ENDPOINT
          value: http://ship-cluster-api.default.svc.cluster.local:3000
        - name: GRAPHQL_PREM_ENDPOINT
          value: https://pg.replicated.com/graphql
        - name: TRACER_NAME
          value: ship-cluster-api
        image: registry.replicated.com/ship-enterprise/ship-cluster-api:c1c6768
        imagePullPolicy: IfNotPresent
        name: ship-cluster-api
        ports:
        - containerPort: 3000
          name: http
        - containerPort: 9229
          name: debug
        readinessProbe:
          httpGet:
            path: /healthz
            port: 3000
          initialDelaySeconds: 2
          periodSeconds: 2
        volumeMounts:
        - mountPath: /keys/github
          name: github-app-private-key
          readOnly: true
      imagePullSecrets:
      - name: replicatedregistrykey
      restartPolicy: Always
      volumes:
      - name: github-app-private-key
        secret:
          secretName: github-app-private-key
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ship-cluster-ui
spec:
  selector:
    matchLabels:
      app: ship-cluster-ui
  template:
    metadata:
      labels:
        app: ship-cluster-ui
    spec:
      containers:
      - args:
        - /scripts/start-ship-cluster-ui.sh
        image: registry.replicated.com/ship-enterprise/ship-cluster-ui:c1c6768
        imagePullPolicy: IfNotPresent
        name: ship-cluster-ui
        ports:
        - containerPort: 3000
          name: http
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 2
          periodSeconds: 2
          successThreshold: 1
          timeoutSeconds: 1
        volumeMounts:
        - mountPath: /scripts/start-ship-cluster-ui.sh
          name: ship-cluster-ui-scripts
          subPath: start-ship-cluster-ui.sh
      imagePullSecrets:
      - name: replicatedregistrykey
      volumes:
      - configMap:
          defaultMode: 484
          name: ship-cluster-ui-scripts
        name: ship-cluster-ui-scripts
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ship-cluster-worker-analyze
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ship-cluster-worker-analyze
  template:
    metadata:
      labels:
        app: ship-cluster-worker-analyze
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - ship-cluster-worker-analyze
              topologyKey: kubernetes.io/hostname
            weight: 2
      containers:
      - args:
        - analyze
        env:
        - name: LOG_LEVEL
          value: warn
        - name: POSTGRES_URI
          valueFrom:
            secretKeyRef:
              key: uri
              name: ship-enterprise-postgres
        - name: ANALYZE_IMAGE
          value: replicated/analyze
        - name: ANALYZE_TAG
          value: alpha
        - name: ANALYZE_PULL_POLICY
          value: IfNotPresent
        - name: TROUBLESHOOT_IMAGE
          value: replicated/troubleshoot
        - name: TROUBLESHOOT_TAG
          value: alpha
        - name: TROUBLESHOOT_PULL_POLICY
          value: IfNotPresent
        - name: LOG_FORMAT
          value: json
        image: registry.replicated.com/ship-enterprise/ship-cluster-worker:9ff723a
        imagePullPolicy: IfNotPresent
        name: ship-cluster-worker
        ports:
        - containerPort: 3000
          name: analyze-server
        readinessProbe:
          httpGet:
            path: /healthz
            port: 3000
          initialDelaySeconds: 2
          periodSeconds: 2
        resources:
          limits:
            memory: 512Mi
          requests:
            memory: 256Mi
      imagePullSecrets:
      - name: replicatedregistrykey
      restartPolicy: Always
      serviceAccountName: ship-cluster-worker-analyze
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ship-cluster-worker-edit
spec:
  selector:
    matchLabels:
      app: ship-cluster-worker-edit
  template:
    metadata:
      labels:
        app: ship-cluster-worker-edit
    spec:
      affinity:
        podAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - ship-cluster-worker-edit
              topologyKey: kubernetes.io/hostname
            weight: 1
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - ship-cluster-worker-edit
              topologyKey: kubernetes.io/hostname
            weight: 2
      containers:
      - args:
        - edit
        env:
        - name: LOG_FORMAT
          value: json
        - name: SHIP_IMAGE
          value: replicated/ship
        - name: SHIP_TAG
          value: 0.49.1
        - name: SHIP_PULL_POLICY
          value: IfNotPresent
        - name: LOG_LEVEL
          value: warn
        - name: S3_ENDPOINT
          value: |
            http://minio.default.svc.cluster.local:9000/
        - name: S3_BUCKET_NAME
          value: |
            ship-enterprise
        - name: S3_ACCESS_KEY_ID
          value: |
            uGbbh9T7Qp5TAFjv9G5QvN5yKTJ95E_s
        - name: S3_SECRET_ACCESS_KEY
          value: |
            YfjIfxEH84xgfZTa0XQ60WEcLRgafdIW
        - name: S3_BUCKET_ENDPOINT
          value: |
            true
        - name: POSTGRES_URI
          valueFrom:
            secretKeyRef:
              key: uri
              name: ship-enterprise-postgres
        - name: GITHUB_PRIVATE_KEY
          valueFrom:
            secretKeyRef:
              key: private-key.pem
              name: github-app-private-key
        - name: GITHUB_INTEGRATION_ID
          value: ""
        image: registry.replicated.com/ship-enterprise/ship-cluster-worker:9ff723a
        imagePullPolicy: IfNotPresent
        name: ship-cluster-worker
        ports:
        - containerPort: 3000
          name: edit-server
        readinessProbe:
          httpGet:
            path: /healthz
            port: 3000
          initialDelaySeconds: 2
          periodSeconds: 2
      imagePullSecrets:
      - name: replicatedregistrykey
      restartPolicy: Always
      serviceAccountName: ship-cluster-worker-edit
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ship-cluster-worker-image
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ship-cluster-worker-image
  template:
    metadata:
      labels:
        app: ship-cluster-worker-image
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - ship-cluster-worker-image
              topologyKey: kubernetes.io/hostname
            weight: 2
      containers:
      - args:
        - image
        env:
        - name: LOG_LEVEL
          value: warn
        - name: POSTGRES_URI
          valueFrom:
            secretKeyRef:
              key: uri
              name: ship-enterprise-postgres
        - name: LOG_FORMAT
          value: json
        image: registry.replicated.com/ship-enterprise/ship-cluster-worker:9ff723a
        imagePullPolicy: IfNotPresent
        name: ship-cluster-worker
        resources:
          limits:
            memory: 512Mi
          requests:
            memory: 256Mi
      imagePullSecrets:
      - name: replicatedregistrykey
      restartPolicy: Always
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ship-cluster-worker-init
spec:
  selector:
    matchLabels:
      app: ship-cluster-worker-init
  template:
    metadata:
      labels:
        app: ship-cluster-worker-init
    spec:
      affinity:
        podAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - ship-cluster-worker-init
              topologyKey: kubernetes.io/hostname
            weight: 1
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - ship-cluster-worker-init
              topologyKey: kubernetes.io/hostname
            weight: 2
      containers:
      - args:
        - init
        env:
        - name: LOG_FORMAT
          value: json
        - name: SHIP_IMAGE
          value: replicated/ship
        - name: SHIP_TAG
          value: 0.49.1
        - name: SHIP_PULL_POLICY
          value: IfNotPresent
        - name: LOG_LEVEL
          value: warn
        - name: S3_ENDPOINT
          value: |
            http://minio.default.svc.cluster.local:9000/
        - name: S3_BUCKET_NAME
          value: |
            ship-enterprise
        - name: S3_ACCESS_KEY_ID
          value: |
            uGbbh9T7Qp5TAFjv9G5QvN5yKTJ95E_s
        - name: S3_SECRET_ACCESS_KEY
          value: |
            YfjIfxEH84xgfZTa0XQ60WEcLRgafdIW
        - name: S3_BUCKET_ENDPOINT
          value: |
            true
        - name: POSTGRES_URI
          valueFrom:
            secretKeyRef:
              key: uri
              name: ship-enterprise-postgres
        - name: GITHUB_PRIVATE_KEY
          valueFrom:
            secretKeyRef:
              key: private-key.pem
              name: github-app-private-key
        - name: GITHUB_INTEGRATION_ID
          value: ""
        image: registry.replicated.com/ship-enterprise/ship-cluster-worker:9ff723a
        imagePullPolicy: IfNotPresent
        name: ship-cluster-worker
        ports:
        - containerPort: 3000
          name: init-server
        readinessProbe:
          httpGet:
            path: /healthz
            port: 3000
          initialDelaySeconds: 2
          periodSeconds: 2
      imagePullSecrets:
      - name: replicatedregistrykey
      restartPolicy: Always
      serviceAccountName: ship-cluster-worker-init
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ship-cluster-worker-update
spec:
  selector:
    matchLabels:
      app: ship-cluster-worker-update
  template:
    metadata:
      labels:
        app: ship-cluster-worker-update
    spec:
      affinity:
        podAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - ship-cluster-worker-update
              topologyKey: kubernetes.io/hostname
            weight: 1
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - ship-cluster-worker-update
              topologyKey: kubernetes.io/hostname
            weight: 2
      containers:
      - args:
        - update
        env:
        - name: LOG_FORMAT
          value: json
        - name: SHIP_IMAGE
          value: replicated/ship
        - name: SHIP_TAG
          value: 0.49.1
        - name: SHIP_PULL_POLICY
          value: IfNotPresent
        - name: LOG_LEVEL
          value: warn
        - name: S3_ENDPOINT
          value: |
            http://minio.default.svc.cluster.local:9000/
        - name: S3_BUCKET_NAME
          value: |
            ship-enterprise
        - name: S3_ACCESS_KEY_ID
          value: |
            uGbbh9T7Qp5TAFjv9G5QvN5yKTJ95E_s
        - name: S3_SECRET_ACCESS_KEY
          value: |
            YfjIfxEH84xgfZTa0XQ60WEcLRgafdIW
        - name: S3_BUCKET_ENDPOINT
          value: |
            true
        - name: POSTGRES_URI
          valueFrom:
            secretKeyRef:
              key: uri
              name: ship-enterprise-postgres
        - name: GITHUB_PRIVATE_KEY
          valueFrom:
            secretKeyRef:
              key: private-key.pem
              name: github-app-private-key
        - name: GITHUB_INTEGRATION_ID
          value: ""
        image: registry.replicated.com/ship-enterprise/ship-cluster-worker:9ff723a
        imagePullPolicy: IfNotPresent
        name: ship-cluster-worker
        ports:
        - containerPort: 3000
          name: update-server
        readinessProbe:
          httpGet:
            path: /healthz
            port: 3000
          initialDelaySeconds: 2
          periodSeconds: 2
      imagePullSecrets:
      - name: replicatedregistrykey
      restartPolicy: Always
      serviceAccountName: ship-cluster-worker-update
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ship-cluster-worker-watch
spec:
  selector:
    matchLabels:
      app: ship-cluster-worker-watch
  template:
    metadata:
      labels:
        app: ship-cluster-worker-watch
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - ship-cluster-worker-watch
              topologyKey: kubernetes.io/hostname
            weight: 2
      containers:
      - args:
        - watch
        env:
        - name: SHIP_IMAGE
          value: replicated/ship
        - name: SHIP_TAG
          value: 0.49.1
        - name: SHIP_PULL_POLICY
          value: IfNotPresent
        - name: LOG_LEVEL
          value: warn
        - name: S3_ENDPOINT
          value: |
            http://minio.default.svc.cluster.local:9000/
        - name: S3_BUCKET_NAME
          value: |
            ship-enterprise
        - name: S3_ACCESS_KEY_ID
          value: |
            uGbbh9T7Qp5TAFjv9G5QvN5yKTJ95E_s
        - name: S3_SECRET_ACCESS_KEY
          value: |
            YfjIfxEH84xgfZTa0XQ60WEcLRgafdIW
        - name: POSTGRES_URI
          valueFrom:
            secretKeyRef:
              key: uri
              name: ship-enterprise-postgres
        - name: GITHUB_PRIVATE_KEY
          valueFrom:
            secretKeyRef:
              key: private-key.pem
              name: github-app-private-key
        - name: GITHUB_INTEGRATION_ID
          value: ""
        - name: LOG_FORMAT
          value: json
        image: registry.replicated.com/ship-enterprise/ship-cluster-worker:9ff723a
        imagePullPolicy: IfNotPresent
        name: ship-cluster-worker
        ports:
        - containerPort: 3000
          name: watch-server
        readinessProbe:
          httpGet:
            path: /healthz
            port: 3000
          initialDelaySeconds: 2
          periodSeconds: 2
        resources:
          limits:
            memory: 512Mi
          requests:
            memory: 256Mi
      imagePullSecrets:
      - name: replicatedregistrykey
      restartPolicy: Always
      serviceAccountName: ship-cluster-worker-watch
---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  labels:
    app: minio
    release: minio
  name: minio
spec:
  selector:
    matchLabels:
      app: minio
      release: minio
  strategy:
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: minio
        release: minio
      name: minio
    spec:
      containers:
      - command:
        - /bin/sh
        - -ce
        - /usr/bin/docker-entrypoint.sh minio -C /root/.minio/ server /export
        env:
        - name: MINIO_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              key: accesskey
              name: s3-secret
        - name: MINIO_SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: secretkey
              name: s3-secret
        - name: MINIO_BROWSER
          value: "true"
        image: minio/minio:RELEASE.2019-07-17T22-54-12Z
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /minio/health/live
            port: service
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 1
        name: minio
        ports:
        - containerPort: 9000
          name: service
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /minio/health/ready
            port: service
          initialDelaySeconds: 5
          periodSeconds: 15
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          requests:
            cpu: 250m
            memory: 256Mi
        volumeMounts:
        - mountPath: /export
          name: export
        - mountPath: /root/.minio/
          name: minio-config-dir
      serviceAccountName: minio
      volumes:
      - name: export
        persistentVolumeClaim:
          claimName: minio
      - name: minio-user
        secret:
          secretName: s3-secret
      - emptyDir: {}
        name: minio-config-dir
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: contour
  name: contour
  namespace: heptio-contour
spec:
  replicas: 2
  selector:
    matchLabels:
      app: contour
  template:
    metadata:
      annotations:
        prometheus.io/format: prometheus
        prometheus.io/path: /stats
        prometheus.io/port: "8002"
        prometheus.io/scrape: "true"
      labels:
        app: contour
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: contour
              topologyKey: kubernetes.io/hostname
            weight: 100
      containers:
      - args:
        - serve
        - --incluster
        command:
        - contour
        image: gcr.io/heptio-images/contour:master
        imagePullPolicy: Always
        name: contour
      - args:
        - --config-path /config/contour.json
        - --service-cluster cluster0
        - --service-node node0
        - --log-level info
        command:
        - envoy
        image: docker.io/envoyproxy/envoy:v1.9.1
        lifecycle:
          preStop:
            exec:
              command:
              - wget
              - -qO-
              - http://localhost:9001/healthcheck/fail
        name: envoy
        ports:
        - containerPort: 8080
          name: http
        - containerPort: 8443
          name: https
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8002
          initialDelaySeconds: 3
          periodSeconds: 3
        volumeMounts:
        - mountPath: /config
          name: contour-config
      dnsPolicy: ClusterFirst
      initContainers:
      - args:
        - bootstrap
        - /config/contour.json
        command:
        - contour
        image: gcr.io/heptio-images/contour:master
        imagePullPolicy: Always
        name: envoy-initconfig
        volumeMounts:
        - mountPath: /config
          name: contour-config
      serviceAccountName: contour
      terminationGracePeriodSeconds: 30
      volumes:
      - emptyDir: {}
        name: contour-config
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    control-plane: controller-manager
    controller-tools.k8s.io: "1.0"
  name: schemahero-controller-manager
  namespace: schemahero-system
spec:
  selector:
    matchLabels:
      control-plane: controller-manager
      controller-tools.k8s.io: "1.0"
  serviceName: schemahero-controller-manager-service
  template:
    metadata:
      labels:
        control-plane: controller-manager
        controller-tools.k8s.io: "1.0"
    spec:
      containers:
      - args:
        - --secure-listen-address=0.0.0.0:8443
        - --upstream=http://127.0.0.1:8088/
        - --logtostderr=true
        - --v=10
        image: gcr.io/kubebuilder/kube-rbac-proxy:v0.4.0
        name: kube-rbac-proxy
        ports:
        - containerPort: 8443
          name: https
      - args:
        - --metrics-addr=127.0.0.1:8088
        command:
        - /manager
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: SECRET_NAME
          value: schemahero-webhook-server-secret
        image: schemahero/schemahero-manager:alpha
        imagePullPolicy: Always
        name: manager
        ports:
        - containerPort: 9876
          name: webhook-server
          protocol: TCP
        resources:
          limits:
            cpu: 100m
            memory: 500Mi
          requests:
            cpu: 100m
            memory: 200Mi
        volumeMounts:
        - mountPath: /tmp/cert
          name: cert
          readOnly: true
      terminationGracePeriodSeconds: 10
      volumes:
      - name: cert
        secret:
          defaultMode: 420
          secretName: schemahero-webhook-server-secret
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    control-plane: controller-manager
    controller-tools.k8s.io: "1.0"
  name: ship-operator-controller-manager
  namespace: ship-operator-system
spec:
  selector:
    matchLabels:
      control-plane: controller-manager
      controller-tools.k8s.io: "1.0"
  serviceName: ship-operator-controller-manager-service
  template:
    metadata:
      labels:
        control-plane: controller-manager
        controller-tools.k8s.io: "1.0"
    spec:
      containers:
      - command:
        - /root/ship-operator
        - manager
        image: registry.replicated.com/ship-enterprise/ship-operator:c83758d
        name: manager
        resources:
          limits:
            cpu: 100m
            memory: 300Mi
          requests:
            cpu: 100m
            memory: 20Mi
      imagePullSecrets:
      - name: replicatedregistrykey
      terminationGracePeriodSeconds: 10
---
apiVersion: apps/v1beta2
kind: StatefulSet
metadata:
  labels:
    app: postgresql
    release: ship-enterprise
  name: ship-enterprise-postgresql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgresql
      release: ship-enterprise
      role: master
  serviceName: ship-enterprise-postgresql-headless
  template:
    metadata:
      labels:
        app: postgresql
        chart: postgresql-3.18.1
        heritage: Tiller
        release: ship-enterprise
        role: master
      name: ship-enterprise-postgresql
    spec:
      containers:
      - env:
        - name: PGDATA
          value: /bitnami/postgresql
        - name: POSTGRES_USER
          value: ship-enterprise
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              key: postgresql-password
              name: postgresql-secret
        - name: POSTGRES_DB
          value: ship-enterprise
        image: docker.io/bitnami/postgresql:10.7.0
        imagePullPolicy: Always
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready -U "ship-enterprise" -d "ship-enterprise" -h 127.0.0.1
          failureThreshold: 6
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        name: ship-enterprise-postgresql
        ports:
        - containerPort: 5432
          name: postgresql
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready -U "ship-enterprise" -d "ship-enterprise" -h 127.0.0.1
          failureThreshold: 6
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          requests:
            cpu: 500m
            memory: 1024Mi
        securityContext:
          runAsUser: 1001
        volumeMounts:
        - mountPath: /bitnami/postgresql
          name: data
          subPath: null
      initContainers:
      - command:
        - sh
        - -c
        - |
          chown -R 1001:1001 /bitnami
          if [ -d /bitnami/postgresql/data ]; then
            chmod  0700 /bitnami/postgresql/data;
          fi
        image: docker.io/bitnami/minideb:latest
        imagePullPolicy: Always
        name: init-chmod-data
        resources:
          requests:
            cpu: 500m
            memory: 1024Mi
        securityContext:
          runAsUser: 0
        volumeMounts:
        - mountPath: /bitnami/postgresql
          name: data
          subPath: null
      securityContext:
        fsGroup: 1001
      volumes: []
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 40Gi
---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-delete-policy: hook-succeeded
  labels:
    app: minio
    release: minio
  name: minio-make-bucket-job
spec:
  template:
    metadata:
      labels:
        app: minio
        release: minio
    spec:
      containers:
      - command:
        - /bin/sh
        - /config/initialize
        env:
        - name: MINIO_ENDPOINT
          value: minio
        - name: MINIO_PORT
          value: "9000"
        image: minio/mc:RELEASE.2019-07-17T22-13-42Z
        imagePullPolicy: IfNotPresent
        name: minio-mc
        volumeMounts:
        - mountPath: /config
          name: minio-configuration
      restartPolicy: OnFailure
      volumes:
      - name: minio-configuration
        projected:
          sources:
          - configMap:
              name: minio
          - secret:
              name: s3-secret
---
apiVersion: batch/v1
kind: Job
metadata:
  name: ship-cluster-local-cluster
spec:
  template:
    spec:
      containers:
      - args:
        - /src/shipcloudctl
        - ensure-local-cluster
        env:
        - name: SHIP_API_ADVERTISE_ENDPOINT
          value: https://test
        - name: POSTGRES_URI
          valueFrom:
            secretKeyRef:
              key: uri
              name: ship-enterprise-postgres
        - name: ENSURE_LOCAL_CLUSTER
          value: ""
        image: registry.replicated.com/ship-enterprise/ship-cluster-api:c1c6768
        imagePullPolicy: IfNotPresent
        name: ship-cluster-local-cluster
      imagePullSecrets:
      - name: replicatedregistrykey
      restartPolicy: OnFailure
---
apiVersion: databases.schemahero.io/v1alpha2
connection:
  postgres:
    uri:
      valueFrom:
        secretKeyRef:
          key: uri
          name: ship-enterprise-postgres
kind: Database
metadata:
  name: ship-cluster-postgres
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: ship-enterprise-ingress
spec:
  rules:
  - http:
      paths:
      - backend:
          serviceName: ship-cluster-ui
          servicePort: 3000
        path: /*
      - backend:
          serviceName: ship-cluster-api
          servicePort: 3000
        path: /api/*
      - backend:
          serviceName: ship-cluster-api
          servicePort: 3000
        path: /graphql
  - host: test
    http:
      paths:
      - backend:
          serviceName: ship-cluster-ui
          servicePort: 3000
        path: /*
      - backend:
          serviceName: ship-cluster-api
          servicePort: 3000
        path: /api/*
      - backend:
          serviceName: ship-cluster-api
          servicePort: 3000
        path: /graphql
  tls:
  - hosts:
    - test
    secretName: ship-enterprise-tls
---
apiVersion: schemas.schemahero.io/v1alpha2
kind: Table
metadata:
  labels:
    controller-tools.k8s.io: "1.0"
  name: cluster-github
spec:
  database: ship-cluster-postgres
  name: cluster_github
  requires: []
  schema:
    postgres:
      columns:
      - constraints:
          notNull: true
        name: cluster_id
        type: text
      - constraints:
          notNull: true
        name: owner
        type: text
      - constraints:
          notNull: true
        name: repo
        type: text
      - name: branch
        type: text
      - constraints:
          notNull: true
        name: installation_id
        type: integer
      - default: "false"
        name: is_deleted
        type: boolean
      - default: "false"
        name: is_404
        type: boolean
      primaryKey:
      - cluster_id
---
apiVersion: schemas.schemahero.io/v1alpha2
kind: Table
metadata:
  labels:
    controller-tools.k8s.io: "1.0"
  name: cluster
spec:
  database: ship-cluster-postgres
  name: cluster
  requires: []
  schema:
    postgres:
      columns:
      - constraints:
          notNull: true
        name: id
        type: text
      - constraints:
          notNull: true
        name: title
        type: text
      - constraints:
          notNull: true
        name: slug
        type: text
      - constraints:
          notNull: true
        name: created_at
        type: timestamp without time zone
      - name: updated_at
        type: timestamp without time zone
      - name: token
        type: text
      - constraints:
          notNull: true
        default: '''gitops''::text'
        name: cluster_type
        type: text
      - constraints:
          notNull: true
        default: "false"
        name: is_all_users
        type: boolean
      primaryKey:
      - id
---
apiVersion: schemas.schemahero.io/v1alpha2
kind: Table
metadata:
  labels:
    controller-tools.k8s.io: "1.0"
  name: email-notification
spec:
  database: ship-cluster-postgres
  name: email_notification
  requires: []
  schema:
    postgres:
      columns:
      - constraints:
          notNull: true
        name: notification_id
        type: text
      - constraints:
          notNull: true
        name: recipient
        type: text
      - constraints:
          notNull: true
        name: created_at
        type: timestamp without time zone
      primaryKey: []
---
apiVersion: schemas.schemahero.io/v1alpha2
kind: Table
metadata:
  labels:
    controller-tools.k8s.io: "1.0"
  name: feature
spec:
  database: ship-cluster-postgres
  name: feature
  requires: []
  schema:
    postgres:
      columns:
      - constraints:
          notNull: true
        name: id
        type: text
      - name: created_at
        type: timestamp without time zone
      primaryKey:
      - id
---
apiVersion: schemas.schemahero.io/v1alpha2
kind: Table
metadata:
  labels:
    controller-tools.k8s.io: "1.0"
  name: github-install
spec:
  database: ship-cluster-postgres
  name: github_install
  requires: []
  schema:
    postgres:
      columns:
      - constraints:
          notNull: true
        name: id
        type: text
      - name: installation_id
        type: integer
      - name: account_login
        type: text
      - name: account_type
        type: text
      - name: account_html_url
        type: text
      - name: sender_login
        type: text
      - name: organization_members_total
        type: integer
      - name: created_at
        type: timestamp without time zone
      - default: "false"
        name: is_deleted
        type: boolean
      primaryKey:
      - id
---
apiVersion: schemas.schemahero.io/v1alpha2
kind: Table
metadata:
  labels:
    controller-tools.k8s.io: "1.0"
  name: github-nonce
spec:
  database: ship-cluster-postgres
  name: github_nonce
  requires: []
  schema:
    postgres:
      columns:
      - constraints:
          notNull: true
        name: nonce
        type: text
      - constraints:
          notNull: true
        name: expire_at
        type: timestamp without time zone
      primaryKey: []
---
apiVersion: schemas.schemahero.io/v1alpha2
kind: Table
metadata:
  labels:
    controller-tools.k8s.io: "1.0"
  name: github-user
spec:
  database: ship-cluster-postgres
  name: github_user
  requires: []
  schema:
    postgres:
      columns:
      - constraints:
          notNull: true
        name: username
        type: text
      - constraints:
          notNull: true
        name: github_id
        type: integer
      - constraints:
          notNull: false
        name: avatar_url
        type: character varying (255)
      - name: email
        type: text
      - name: user_id
        type: text
      primaryKey:
      - username
---
apiVersion: schemas.schemahero.io/v1alpha2
kind: Table
metadata:
  name: helm-chart-source
spec:
  database: ship-cluster-postgres
  name: helm_chart_source
  requires: []
  schema:
    postgres:
      columns:
      - constraints:
          notNull: true
        name: helm_chart_id
        type: text
      - constraints:
          notNull: true
        name: source
        type: text
      primaryKey:
      - helm_chart_id
      - source
---
apiVersion: schemas.schemahero.io/v1alpha2
kind: Table
metadata:
  name: helm-chart
spec:
  database: ship-cluster-postgres
  name: helm_chart
  requires: []
  schema:
    postgres:
      columns:
      - constraints:
          notNull: true
        name: id
        type: text
      - constraints:
          notNull: true
        name: cluster_id
        type: text
      - constraints:
          notNull: true
        name: helm_name
        type: text
      - constraints:
          notNull: true
        name: namespace
        type: text
      - name: version
        type: int
      - constraints:
          notNull: true
        name: first_deployed_at
        type: timestamp without time zone
      - constraints:
          notNull: true
        name: last_deployed_at
        type: timestamp without time zone
      - name: is_deleted
        type: boolean
      - constraints:
          notNull: true
        name: chart_version
        type: text
      - constraints:
          notNull: true
        name: app_version
        type: text
      primaryKey:
      - id
---
apiVersion: schemas.schemahero.io/v1alpha2
kind: Table
metadata:
  labels:
    controller-tools.k8s.io: "1.0"
  name: image-watch-batch
spec:
  database: ship-cluster-postgres
  name: image_watch_batch
  requires: []
  schema:
    postgres:
      columns:
      - constraints:
          notNull: true
        name: id
        type: text
      - name: user_id
        type: text
      - constraints:
          notNull: true
        name: images_input
        type: text
      - constraints:
          notNull: true
        name: created_at
        type: timestamp without time zone
      primaryKey:
      - id
---
apiVersion: schemas.schemahero.io/v1alpha2
kind: Table
metadata:
  labels:
    controller-tools.k8s.io: "1.0"
  name: image-watch
spec:
  database: ship-cluster-postgres
  name: image_watch
  requires: []
  schema:
    postgres:
      columns:
      - constraints:
          notNull: true
        name: id
        type: text
      - constraints:
          notNull: true
        name: batch_id
        type: text
      - constraints:
          notNull: true
        name: image_name
        type: text
      - name: checked_at
        type: timestamp without time zone
      - default: "false"
        name: is_private
        type: boolean
      - default: "0"
        name: versions_behind
        type: integer
      - name: detected_version
        type: text
      - name: latest_version
        type: text
      - name: compatible_version
        type: text
      - name: check_error
        type: text
      - name: docker_pullable
        type: text
      - name: path
        type: text
      - name: started_processing_at
        type: timestamp without time zone
      primaryKey:
      - id
---
apiVersion: schemas.schemahero.io/v1alpha2
kind: Table
metadata:
  labels:
    controller-tools.k8s.io: "1.0"
  name: object-store
spec:
  database: ship-cluster-postgres
  name: object_store
  requires: []
  schema:
    postgres:
      columns:
      - constraints:
          notNull: true
        name: filepath
        type: text
      - constraints:
          notNull: true
        name: encoded_block
        type: text
      primaryKey:
      - filepath
---
apiVersion: schemas.schemahero.io/v1alpha2
kind: Table
metadata:
  labels:
    controller-tools.k8s.io: "1.0"
  name: pending-pullrequest-notification
spec:
  database: ship-cluster-postgres
  name: pending_pullrequest_notification
  requires: []
  schema:
    postgres:
      columns:
      - constraints:
          notNull: true
        name: pullrequest_history_id
        type: text
      - constraints:
          notNull: true
        name: org
        type: text
      - constraints:
          notNull: true
        name: repo
        type: text
      - constraints:
          notNull: true
        name: branch
        type: text
      - name: root_path
        type: text
      - constraints:
          notNull: true
        name: created_at
        type: timestamp without time zone
      - constraints:
          notNull: true
        name: github_installation_id
        type: integer
      - default: '''-1''::integer'
        name: pullrequest_number
        type: integer
      - name: watch_id
        type: text
      primaryKey: []
---
apiVersion: schemas.schemahero.io/v1alpha2
kind: Table
metadata:
  labels:
    controller-tools.k8s.io: "1.0"
  name: pullrequest-history
spec:
  database: ship-cluster-postgres
  name: pullrequest_history
  requires: []
  schema:
    postgres:
      columns:
      - constraints:
          notNull: true
        name: notification_id
        type: text
      - constraints:
          notNull: true
        name: pullrequest_number
        type: integer
      - constraints:
          notNull: true
        name: version_label
        type: text
      - constraints:
          notNull: true
        name: org
        type: text
      - constraints:
          notNull: true
        name: repo
        type: text
      - name: branch
        type: text
      - name: root_path
        type: text
      - constraints:
          notNull: true
        name: created_at
        type: timestamp without time zone
      - constraints:
          notNull: true
        default: '''unknown''::text'
        name: github_status
        type: text
      - default: "0"
        name: sequence
        type: integer
      - default: '''''::text'
        name: source_branch
        type: text
      primaryKey: []
---
apiVersion: schemas.schemahero.io/v1alpha2
kind: Table
metadata:
  labels:
    controller-tools.k8s.io: "1.0"
  name: pullrequest-notification
spec:
  database: ship-cluster-postgres
  name: pullrequest_notification
  requires: []
  schema:
    postgres:
      columns:
      - constraints:
          notNull: true
        name: notification_id
        type: text
      - constraints:
          notNull: true
        name: org
        type: text
      - constraints:
          notNull: true
        name: repo
        type: text
      - name: branch
        type: text
      - name: root_path
        type: text
      - constraints:
          notNull: true
        name: created_at
        type: timestamp without time zone
      - constraints:
          notNull: true
        name: github_installation_id
        type: integer
      primaryKey: []
---
apiVersion: schemas.schemahero.io/v1alpha2
kind: Table
metadata:
  labels:
    controller-tools.k8s.io: "1.0"
  name: session
spec:
  database: ship-cluster-postgres
  name: session
  requires: []
  schema:
    postgres:
      columns:
      - constraints:
          notNull: true
        name: id
        type: text
      - constraints:
          notNull: true
        name: user_id
        type: text
      - constraints:
          notNull: true
        name: metadata
        type: text
      - constraints:
          notNull: true
        name: expire_at
        type: timestamp without time zone
      primaryKey:
      - id
---
apiVersion: schemas.schemahero.io/v1alpha2
kind: Table
metadata:
  labels:
    controller-tools.k8s.io: "1.0"
  name: ship-edit
spec:
  database: ship-cluster-postgres
  name: ship_edit
  requires: []
  schema:
    postgres:
      columns:
      - constraints:
          notNull: true
        name: id
        type: text
      - constraints:
          notNull: true
        name: watch_id
        type: text
      - constraints:
          notNull: true
        name: user_id
        type: text
      - name: result
        type: text
      - constraints:
          notNull: true
        name: created_at
        type: timestamp without time zone
      - name: finished_at
        type: timestamp without time zone
      - name: is_headless
        type: boolean
      primaryKey:
      - id
---
apiVersion: schemas.schemahero.io/v1alpha2
kind: Table
metadata:
  labels:
    controller-tools.k8s.io: "1.0"
  name: ship-init-pending-user
spec:
  database: ship-cluster-postgres
  name: ship_init_pending_user
  requires: []
  schema:
    postgres:
      columns:
      - constraints:
          notNull: true
        name: user_id
        type: text
      - constraints:
          notNull: true
        name: ship_init_pending_id
        type: text
      primaryKey: []
---
apiVersion: schemas.schemahero.io/v1alpha2
kind: Table
metadata:
  labels:
    controller-tools.k8s.io: "1.0"
  name: ship-init-pending
spec:
  database: ship-cluster-postgres
  name: ship_init_pending
  requires: []
  schema:
    postgres:
      columns:
      - constraints:
          notNull: true
        name: id
        type: text
      - constraints:
          notNull: true
        name: upstream_uri
        type: text
      - constraints:
          notNull: true
        name: requested_upstream_uri
        type: text
      - constraints:
          notNull: true
        name: title
        type: text
      - constraints:
          notNull: true
        name: created_at
        type: timestamp without time zone
      - name: finished_at
        type: timestamp without time zone
      - name: result
        type: text
      primaryKey:
      - id
---
apiVersion: schemas.schemahero.io/v1alpha2
kind: Table
metadata:
  labels:
    controller-tools.k8s.io: "1.0"
  name: ship-init
spec:
  database: ship-cluster-postgres
  name: ship_init
  requires: []
  schema:
    postgres:
      columns:
      - constraints:
          notNull: true
        name: id
        type: text
      - constraints:
          notNull: true
        name: upstream_uri
        type: text
      - constraints:
          notNull: true
        name: created_at
        type: timestamp without time zone
      - name: finished_at
        type: timestamp without time zone
      - name: result
        type: text
      - constraints:
          notNull: true
        name: user_id
        type: text
      - name: cluster_id
        type: text
      - name: github_path
        type: text
      - name: requested_upstream_uri
        type: text
      - name: parent_watch_id
        type: text
      - name: parent_sequence
        type: integer
      primaryKey:
      - id
---
apiVersion: schemas.schemahero.io/v1alpha2
kind: Table
metadata:
  labels:
    controller-tools.k8s.io: "1.0"
  name: ship-notification
spec:
  database: ship-cluster-postgres
  name: ship_notification
  requires: []
  schema:
    postgres:
      columns:
      - constraints:
          notNull: true
        name: id
        type: text
      - constraints:
          notNull: true
        name: watch_id
        type: text
      - constraints:
          notNull: true
        name: created_at
        type: timestamp without time zone
      - name: updated_at
        type: timestamp without time zone
      - name: triggered_at
        type: timestamp without time zone
      - name: enabled
        type: smallint
      primaryKey:
      - id
---
apiVersion: schemas.schemahero.io/v1alpha2
kind: Table
metadata:
  labels:
    controller-tools.k8s.io: "1.0"
  name: ship-output-files
spec:
  database: ship-cluster-postgres
  name: ship_output_files
  requires: []
  schema:
    postgres:
      columns:
      - constraints:
          notNull: true
        name: watch_id
        type: text
      - constraints:
          notNull: true
        name: created_at
        type: timestamp without time zone
      - constraints:
          notNull: true
        default: "0"
        name: sequence
        type: integer
      - constraints:
          notNull: true
        name: filepath
        type: text
      primaryKey:
      - watch_id
      - sequence
---
apiVersion: schemas.schemahero.io/v1alpha2
kind: Table
metadata:
  labels:
    controller-tools.k8s.io: "1.0"
  name: ship-unfork
spec:
  database: ship-cluster-postgres
  name: ship_unfork
  requires: []
  schema:
    postgres:
      columns:
      - constraints:
          notNull: true
        name: id
        type: text
      - constraints:
          notNull: true
        name: upstream_uri
        type: text
      - constraints:
          notNull: true
        name: fork_uri
        type: text
      - constraints:
          notNull: true
        name: created_at
        type: timestamp without time zone
      - name: finished_at
        type: timestamp without time zone
      - name: result
        type: text
      - constraints:
          notNull: true
        name: user_id
        type: text
      primaryKey:
      - id
---
apiVersion: schemas.schemahero.io/v1alpha2
kind: Table
metadata:
  labels:
    controller-tools.k8s.io: "1.0"
  name: ship-update
spec:
  database: ship-cluster-postgres
  name: ship_update
  requires: []
  schema:
    postgres:
      columns:
      - constraints:
          notNull: true
        name: id
        type: text
      - constraints:
          notNull: true
        name: watch_id
        type: text
      - name: user_id
        type: text
      - name: result
        type: text
      - constraints:
          notNull: true
        name: created_at
        type: timestamp without time zone
      - name: started_at
        type: timestamp without time zone
      - name: finished_at
        type: timestamp without time zone
      - name: parent_sequence
        type: integer
      - name: ship_logs
        type: text
      primaryKey:
      - id
---
apiVersion: schemas.schemahero.io/v1alpha2
kind: Table
metadata:
  labels:
    controller-tools.k8s.io: "1.0"
  name: ship-user-local
spec:
  database: ship-cluster-postgres
  name: ship_user_local
  requires: []
  schema:
    postgres:
      columns:
      - constraints:
          notNull: true
        name: user_id
        type: text
      - constraints:
          notNull: true
        name: password_bcrypt
        type: text
      - name: first_name
        type: text
      - name: last_name
        type: text
      - constraints:
          notNull: true
        name: email
        type: text
      primaryKey:
      - user_id
---
apiVersion: schemas.schemahero.io/v1alpha2
kind: Table
metadata:
  labels:
    controller-tools.k8s.io: "1.0"
  name: ship-user
spec:
  database: ship-cluster-postgres
  name: ship_user
  requires: []
  schema:
    postgres:
      columns:
      - constraints:
          notNull: true
        name: id
        type: text
      - name: created_at
        type: timestamp without time zone
      - name: github_id
        type: integer
      - name: last_login
        type: timestamp without time zone
      primaryKey:
      - id
---
apiVersion: schemas.schemahero.io/v1alpha2
kind: Table
metadata:
  labels:
    controller-tools.k8s.io: "1.0"
  name: supportbundle-analysis
spec:
  database: ship-cluster-postgres
  name: supportbundle_analysis
  requires: []
  schema:
    postgres:
      columns:
      - constraints:
          notNull: true
        name: id
        type: text
      - constraints:
          notNull: true
        name: supportbundle_id
        type: text
      - name: error
        type: text
      - name: max_severity
        type: text
      - name: insights
        type: text
      - constraints:
          notNull: true
        name: created_at
        type: timestamp without time zone
      primaryKey:
      - id
---
apiVersion: schemas.schemahero.io/v1alpha2
kind: Table
metadata:
  labels:
    controller-tools.k8s.io: "1.0"
  name: supportbundle
spec:
  database: ship-cluster-postgres
  name: supportbundle
  requires: []
  schema:
    postgres:
      columns:
      - constraints:
          notNull: true
        name: id
        type: text
      - constraints:
          notNull: true
        name: slug
        type: text
      - constraints:
          notNull: true
        name: watch_id
        type: text
      - name: name
        type: text
      - name: size
        type: integer
      - constraints:
          notNull: true
        name: status
        type: text
      - name: tree_index
        type: text
      - name: analysis_id
        type: text
      - constraints:
          notNull: true
        name: created_at
        type: timestamp without time zone
      - name: uploaded_at
        type: timestamp without time zone
      - name: is_archived
        type: boolean
      primaryKey:
      - id
---
apiVersion: schemas.schemahero.io/v1alpha2
kind: Table
metadata:
  labels:
    controller-tools.k8s.io: "1.0"
  name: track-scm-leads
spec:
  database: ship-cluster-postgres
  name: track_scm_leads
  requires: []
  schema:
    postgres:
      columns:
      - constraints:
          notNull: true
        name: id
        type: text
      - constraints:
          notNull: true
        name: deployment_type
        type: text
      - constraints:
          notNull: true
        name: email_address
        type: text
      - constraints:
          notNull: true
        name: scm_provider
        type: text
      - constraints:
          notNull: true
        name: created_at
        type: timestamp without time zone
      - constraints:
          notNull: true
        default: "false"
        name: followed_up
        type: boolean
      primaryKey:
      - id
---
apiVersion: schemas.schemahero.io/v1alpha2
kind: Table
metadata:
  labels:
    controller-tools.k8s.io: "1.0"
  name: user-cluster
spec:
  database: ship-cluster-postgres
  name: user_cluster
  requires: []
  schema:
    postgres:
      columns:
      - constraints:
          notNull: true
        name: user_id
        type: text
      - constraints:
          notNull: true
        name: cluster_id
        type: text
      primaryKey: []
---
apiVersion: schemas.schemahero.io/v1alpha2
kind: Table
metadata:
  labels:
    controller-tools.k8s.io: "1.0"
  name: user-feature
spec:
  database: ship-cluster-postgres
  name: user_feature
  requires: []
  schema:
    postgres:
      columns:
      - constraints:
          notNull: true
        name: user_id
        type: text
      - constraints:
          notNull: true
        name: feature_id
        type: text
      primaryKey:
      - user_id
      - feature_id
---
apiVersion: schemas.schemahero.io/v1alpha2
kind: Table
metadata:
  labels:
    controller-tools.k8s.io: "1.0"
  name: user-watch
spec:
  database: ship-cluster-postgres
  name: user_watch
  requires: []
  schema:
    postgres:
      columns:
      - constraints:
          notNull: true
        name: user_id
        type: text
      - constraints:
          notNull: true
        name: watch_id
        type: text
      primaryKey:
      - user_id
      - watch_id
---
apiVersion: schemas.schemahero.io/v1alpha2
kind: Table
metadata:
  labels:
    controller-tools.k8s.io: "1.0"
  name: watch-cluster
spec:
  database: ship-cluster-postgres
  name: watch_cluster
  requires: []
  schema:
    postgres:
      columns:
      - constraints:
          notNull: true
        name: watch_id
        type: text
      - constraints:
          notNull: true
        name: cluster_id
        type: text
      - name: github_path
        type: text
      primaryKey: []
---
apiVersion: schemas.schemahero.io/v1alpha2
kind: Table
metadata:
  labels:
    controller-tools.k8s.io: "1.0"
  name: watch-downstream-token
spec:
  database: ship-cluster-postgres
  name: watch_downstream_token
  requires: []
  schema:
    postgres:
      columns:
      - constraints:
          notNull: true
        name: token
        type: text
      - constraints:
          notNull: true
        name: watch_id
        type: text
      primaryKey:
      - token
---
apiVersion: schemas.schemahero.io/v1alpha2
kind: Table
metadata:
  labels:
    controller-tools.k8s.io: "1.0"
  name: watch-feature
spec:
  database: ship-cluster-postgres
  name: watch_feature
  requires: []
  schema:
    postgres:
      columns:
      - constraints:
          notNull: true
        name: watch_id
        type: text
      - constraints:
          notNull: true
        name: feature_id
        type: text
      primaryKey:
      - watch_id
      - feature_id
---
apiVersion: schemas.schemahero.io/v1alpha2
kind: Table
metadata:
  labels:
    controller-tools.k8s.io: "1.0"
  name: watch-license
spec:
  database: ship-cluster-postgres
  name: watch_license
  requires: []
  schema:
    postgres:
      columns:
      - constraints:
          notNull: true
        name: watch_id
        type: text
      - name: license
        type: text
      - name: license_updated_at
        type: timestamp without time zone
      primaryKey:
      - watch_id
---
apiVersion: schemas.schemahero.io/v1alpha2
kind: Table
metadata:
  labels:
    controller-tools.k8s.io: "1.0"
  name: watch-toubleshoot-analyzer
spec:
  database: ship-cluster-postgres
  name: watch_troubleshoot_analyzer
  requires: []
  schema:
    postgres:
      columns:
      - constraints:
          notNull: true
        name: watch_id
        type: text
      - name: release_analyzer
        type: text
      - name: release_analyzer_updated_at
        type: timestamp without time zone
      - name: updated_analyzer
        type: text
      - name: updated_analyzer_updated_at
        type: timestamp without time zone
      - name: use_updated_analyzer
        type: boolean
      primaryKey:
      - watch_id
---
apiVersion: schemas.schemahero.io/v1alpha2
kind: Table
metadata:
  labels:
    controller-tools.k8s.io: "1.0"
  name: watch-toubleshoot-collector
spec:
  database: ship-cluster-postgres
  name: watch_troubleshoot_collector
  requires: []
  schema:
    postgres:
      columns:
      - constraints:
          notNull: true
        name: watch_id
        type: text
      - name: release_collector
        type: text
      - name: release_collector_updated_at
        type: timestamp without time zone
      - name: updated_collector
        type: text
      - name: updated_collector_updated_at
        type: timestamp without time zone
      - name: use_updated_collector
        type: boolean
      primaryKey:
      - watch_id
---
apiVersion: schemas.schemahero.io/v1alpha2
kind: Table
metadata:
  name: watch-version
spec:
  database: ship-cluster-postgres
  name: watch_version
  requires: []
  schema:
    postgres:
      columns:
      - constraints:
          notNull: true
        name: watch_id
        type: text
      - name: created_at
        type: timestamp without time zone
      - constraints:
          notNull: true
        name: version_label
        type: text
      - constraints:
          notNull: true
        default: '''unknown''::text'
        name: status
        type: text
      - name: source_branch
        type: text
      - default: "0"
        name: sequence
        type: integer
      - name: pullrequest_number
        type: integer
      - name: parent_sequence
        type: integer
      - name: deployed_at
        type: timestamp without time zone
      - name: commit_sha
        type: text
      - name: last_synced_at
        type: timestamp without time zone
      - default: "false"
        name: is_404
        type: boolean
      primaryKey: []
---
apiVersion: schemas.schemahero.io/v1alpha2
kind: Table
metadata:
  labels:
    controller-tools.k8s.io: "1.0"
  name: watch
spec:
  database: ship-cluster-postgres
  name: watch
  requires: []
  schema:
    postgres:
      columns:
      - constraints:
          notNull: true
        name: id
        type: text
      - name: current_state
        type: text
      - constraints:
          notNull: true
        name: title
        type: text
      - name: icon_uri
        type: text
      - constraints:
          notNull: true
        name: created_at
        type: timestamp without time zone
      - name: updated_at
        type: timestamp without time zone
      - constraints:
          notNull: true
        name: slug
        type: text
      - name: parent_watch_id
        type: text
      - name: current_sequence
        type: integer
      - name: metadata
        type: text
      - name: last_watch_check_at
        type: timestamp without time zone
      - default: "false"
        name: is_update_required
        type: boolean
      primaryKey:
      - id
---
apiVersion: schemas.schemahero.io/v1alpha2
kind: Table
metadata:
  labels:
    controller-tools.k8s.io: "1.0"
  name: webhook-notification
spec:
  database: ship-cluster-postgres
  name: webhook_notification
  requires: []
  schema:
    postgres:
      columns:
      - constraints:
          notNull: true
        name: notification_id
        type: text
      - constraints:
          notNull: true
        name: destination_uri
        type: text
      - constraints:
          notNull: true
        name: created_at
        type: timestamp without time zone
      primaryKey: []
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: minio
    release: minio
  name: minio
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 40Gi
